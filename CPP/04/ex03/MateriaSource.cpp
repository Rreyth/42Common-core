#include "MateriaSource.hpp"

////////////////////////////////////////////////////////////////////////////////
// Constructors and destructor
////////////////////////////////////////////////////////////////////////////////

MateriaSource::MateriaSource( void )
{
	for (int i = 0; i < 4; i++)
		templates[i] = NULL;
}


MateriaSource::MateriaSource(const MateriaSource &obj)
{
	*this = obj;
}


MateriaSource::~MateriaSource( void )
{
	for (int i = 0; i < 4; i++)
		if (templates[i])
			delete templates[i];
}


////////////////////////////////////////////////////////////////////////////////
// Getters and setters
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Operators
////////////////////////////////////////////////////////////////////////////////

MateriaSource	&MateriaSource::operator=(const MateriaSource &obj)
{
	if (this == &obj)
		return (*this);
	for (int i = 0; i < 4; i++)
		if (templates[i])
			delete templates[i];
	for (int i = 0; i < 4; i++)
		if (obj.templates[i])
			templates[i] = obj.templates[i]->clone();
	return (*this);
}


////////////////////////////////////////////////////////////////////////////////
// Public methods
////////////////////////////////////////////////////////////////////////////////

void	MateriaSource::learnMateria(AMateria* m)
{
	for (int i = 0; i < 4; i++)
	{
		if (!templates[i])
		{
			templates[i] = m;
			return ;
		}
	}
}

AMateria*	MateriaSource::createMateria(std::string const & type)
{
	for (int i = 0; i < 4; i++)
	{
		if (templates[i] && templates[i]->getType() == type)
			return (templates[i]->clone());
	}
	return (0);
}


////////////////////////////////////////////////////////////////////////////////
// Private methods
////////////////////////////////////////////////////////////////////////////////
