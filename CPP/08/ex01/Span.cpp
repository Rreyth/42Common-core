#include "Span.hpp"

////////////////////////////////////////////////////////////////////////////////
// Constructors and destructor
////////////////////////////////////////////////////////////////////////////////
Span::Span( void )
{
	maxSize = 0;
}


Span::Span(unsigned int N)
{
	maxSize = N;
}


Span::Span(const Span &obj)
{

}


Span::~Span( void )
{

}


////////////////////////////////////////////////////////////////////////////////
// Getters and setters
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Operators
////////////////////////////////////////////////////////////////////////////////
Span	&Span::operator=(const Span &obj)
{
	if (this == &obj)
		return (*this);

	return (*this);
}


////////////////////////////////////////////////////////////////////////////////
// Public methods
////////////////////////////////////////////////////////////////////////////////

void	Span::addNumber(int n)
{
	if (list.size() < maxSize)
	{
		list.push_back(n);
		list.sort();
	}
	else
		throw();
}

int	Span::shortestSpan()
{
	if (list.size() <= 1)
		throw();
	
}

int	Span::longestSpan()
{
	if (list.size() <= 1)
		throw();
	return (*++list.rend() - *list.begin());
}

////////////////////////////////////////////////////////////////////////////////
// Private methods
////////////////////////////////////////////////////////////////////////////////
